
_deeper_type = (object) ->
    type_name = type(output)
    if type_name == "table"
        metatable = getmetatable(self)
        if metatable
            return metatable
    return type_name

-- THIS HASN'T ACTUALLY BEEN TESTED!!!!
export get_UIE_by_attribute = (ui_box, attribute_key, attribute_value, node) ->
    if ui_box == "any"
        return get_UIE_by_attribute(G.I.UIBOX, attribute_key, attribute_value, node)
    
    if _deeper_type(ui_box) == "table"
        ui_boxes = ui_box
        for ui_box in *ui_boxes
            output = get_UIE_by_attribute(ui_box, attribute_key, attribute_value, node)
            if output
                return output
        return nil

    node ??= ui_box.UIRoot
    if node.config?[attribute_key] == attribute_value
        return node
    for child_key, child_value in pairs(node.children)
        result = get_UIE_by_attribute(ui_box, attribute_key, attribute_value, child_value)
        if result
            return result
        elseif child_value.config.object?.get_UIE_by_ID  -- a bit jank to check for this, like in the original code, but I figure it being present at least guarentees that it *is* a UIBox
            result = get_UIE_by_attribute(v.config.object, attribute_key, attribute_value, nil)
            if result
                return result
    return nil

export get_button = (ui_box, button_function_name) -> get_UIE_by_attribute(ui_box, "button", button_function_name)

export get_UIBoxes_by_check = (check, kwargs={}) ->
    kwargs.instance_type ??= nil  -- Uhhhhhh I guess that's redundant but whatever. lets you know it exists
    
    target_table = if kwargs.instance_type 
        G.I[kwargs.instance_type]
    else
        G.I.UIBOX
    
    output = {}
    for ui_box in *target_table
        if check(ui_box)
            output[] = ui_box
    return output

export get_UIBox_by_check = (check, kwargs={}) -> get_UIBoxes_by_check(check, kwargs)[1] 

export get_UIBox_by_id = (id, kwargs={}) -> get_UIBox_by_check(((ui_box) -> ui_box.config?.id == id), kwargs)

-- Done by macros instead of a for loop for intelisense
macro GENERATE_BLIND = (blind_name) -> "
{
    get_ui_box: -> G.blind_select_opts.#{blind_name}
    buttons: {
        get_select: -> screens.select_blind.#{blind_name}.get_ui_box()::get_UIE_by_ID('select_blind_button')
        get_skip:   -> screens.select_blind.#{blind_name}.get_ui_box() |> get_UIE_by_attribute('button', 'skip_blind')
    }
}
"

export card_areas = {
    get_hand:        -> G.hand
    get_jokers:      -> G.jokers
    get_consumables: -> G.consumeables
    get_inventory:   -> G.consumeables
}

macro SCREEN_CARD_AREAS = (...) -> 
    output = {}
    output[] = "{"

    always_present = {"jokers", "consumables", "inventory"}
    for area_name in *{...{...}, ...always_present}
        output[] = "get_#{area_name}: card_areas.get_#{area_name}"

    output[] = "}"
    return output |> table.concat("\n")

local screens
export screens = {
    select_blind: {
        small: $GENERATE_BLIND small
        big: $GENERATE_BLIND big
        boss: $GENERATE_BLIND boss
        card_areas: $SCREEN_CARD_AREAS()
    }
    blind: {
        buttons: {
            get_play_hand: -> G.buttons |> get_UIE_by_attribute("button", "play_cards_from_highlighted")
            get_rank:      -> G.buttons |> get_UIE_by_attribute("button", "sort_hand_value")
            get_suit:      -> G.buttons |> get_UIE_by_attribute("button", "sort_hand_suit")
            get_discard:   -> G.buttons |> get_UIE_by_attribute("button", "discard_cards_from_highlighted")
        }
        card_areas: $SCREEN_CARD_AREAS(hand)
    }
    win_blind: {
        buttons: {
            get_cash_out: -> screens.win_blind.get_ui_box() |> get_button("cash_out")
        }
        card_areas: $SCREEN_CARD_AREAS()
        get_uibox: ((uibox) -> uibox.config.major == G.round_eval != nil) |> get_UIBox_by_check
    }
}