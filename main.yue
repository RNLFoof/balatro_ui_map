
-- THIS HASN'T ACTUALLY BEEN TESTED!!!!
export get_UIE_by_attribute = (ui_box, attribute_key, attribute_value, node) ->
    node ??= ui_box.UIRoot
    if node.config?[attribute_key] == attribute_value
        return node
    for child_key, child_value in pairs(node.children)
        result = get_UIE_by_attribute(ui_box, attribute_key, attribute_value, child_value)
        if result
            return result
        elseif child_value.config.object?.get_UIE_by_ID  -- a bit jank to check for this, like in the original code, but I figure it being present at least guarentees that it *is* a UIBox
            result = get_UIE_by_attribute(v.config.object, attribute_key, attribute_value, nil)
            if result
                return res
    return nil

-- Done by macros instead of a for loop for intelisense
macro GENERATE_BLIND = (blind_name) -> "
#{blind_name}: {
    get_ui_box: -> G.blind_select_opts.#{blind_name}
    buttons: {
        get_select: -> screens.select_blind.#{blind_name}.get_ui_box()::get_UIE_by_ID('select_blind_button')
        get_skip:   -> screens.select_blind.#{blind_name}.get_ui_box() |> get_UIE_by_attribute('button', 'skip_blind')
    }
}
"

export card_areas = {
    get_hand:        -> G.hand
    get_jokers:      -> G.jokers
    get_consumables: -> G.consumeables
    get_inventory:   -> G.consumeables
}

macro SCREEN_CARD_AREAS = (...) -> 
    output = {}
    output[] = "{"

    always_present = {"jokers", "consumables", "inventory"}
    for area_name in *{...{...}, ...always_present}
        output[] = "get_#{area_name}: card_areas.get_#{area_name}"

    output[] = "}"
    return output |> table.concat("\n")

export screens = {
    select_blind: {
        $GENERATE_BLIND small
        $GENERATE_BLIND big
        $GENERATE_BLIND boss
        card_areas: $SCREEN_CARD_AREAS()
    }
    blind: {
        buttons: {
            get_play_hand: -> G.buttons |> get_UIE_by_attribute("button", "play_cards_from_highlighted")
            get_rank:      -> G.buttons |> get_UIE_by_attribute("button", "sort_hand_value")
            get_suit:      -> G.buttons |> get_UIE_by_attribute("button", "sort_hand_suit")
            get_discard:   -> G.buttons |> get_UIE_by_attribute("button", "discard_cards_from_highlighted")
        }
        card_areas: $SCREEN_CARD_AREAS(hand)
    }
}